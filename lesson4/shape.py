"""
Напишите класс Shape, представляющий геометрическую фигуру, имеющий следующие методы:

- __init__(self, name): конструктор, принимающий имя геометрической фигуры;
- area(self): метод, который вычисляет площадь геометрической фигуры.

Напишите класс Rectangle, наследующийся от класса Shape, представляющий прямоугольник, имеющий следующие методы:

- __init__(self, name, width, height): конструктор, принимающий имя прямоугольника, ширину и высоту;
- area(self): метод, который вычисляет площадь прямоугольника.

Напишите класс Triangle, наследующийся от класса Shape, представляющий треугольник, имеющий следующие методы:

- __init__(self, name, base, height): конструктор, принимающий имя треугольника, основание и высоту;
- area(self): метод, который вычисляет площадь треугольника.
"""

from abc import ABC, abstractmethod
# Абстрактный метод в классе Shape нужен для определения общего интерфейса для всех подклассов.


class Shape(ABC):  # Наследование от ABC (Abstract Base Class) используется для создания абстрактных базовых классов
    """Класс, представляющий геометрическую фигуру"""
    # Использование ABC позволяет явно указать, что класс является абстрактным,
    # и что его нельзя создать напрямую. Он служит только в качестве базового класса
    # для других классов, которые должны реализовать определенный интерфейс.

    def __init__(self, name: str) -> None:
        """Конструктор, принимающий имя геометрической фигуры"""
        self.name = name

    @abstractmethod
    def area(self):
        """Метод, который вычисляет площадь геометрической фигуры"""
        pass
    # Абстрактный метод area() определяет, что каждый подкласс
    # должен реализовать метод для вычисления площади своей геометрической фигуры.


class Rectangle(Shape):
    """Класс, наследующийся от класса Shape, представляющий прямоугольник"""

    def __init__(self, name: str, width: int or float, height: int or float) -> None:
        """Конструктор, принимающий имя прямоугольника, ширину и высоту"""
        # за именем обращаемся в инициализатор родительского класса
        super().__init__(name)
        # добавляем остальные параметры
        self.width = width
        self.height = height

    def area(self) -> int or float:
        """Метод, который вычисляет площадь прямоугольника"""
        return self.width * self.height


class Triangle(Shape):
    """Класс, наследующийся от класса Shape, представляющий треугольник"""

    def __init__(self, name: str, base: int or float, height: int or float) -> None:
        # за именем обращаемся в инициализатор родительского класса
        super().__init__(name)
        # принимаем остальные параметры
        self.base = base
        self.height = height

    def area(self) -> float:  # деление всегда вернёт float
        """Метод, который вычисляет площадь треугольника"""
        # формулу нахождения площади треугольника можно загуглить;)
        return (self.base * self.height) / 2


# В данном случае, класс Shape является абстрактным базовым классом
# и его абстрактный метод  area()  не имеет реализации (пустое тело метода -- pass). \
# Подклассы Rectangle и Triangle обязаны реализовать этот метод,
# чтобы предоставить собственные формулы для вычисления площади.
#
# Использование абстрактного метода позволяет нам создавать общий интерфейс
# для различных геометрических фигур, гарантируя, что каждая фигура будет иметь метод area(),
# но оставляя детали реализации для каждого конкретного подкласса.


# создаём прямоугольник
rect = Rectangle("Rectangle", 5, 10)
# с помощью метода area() считаем площадь прямоугольника и печатаем её
print(rect.area())  # 50

# создаём треугольник
tri = Triangle("Triangle", 6, 4)
# с помощью метода area() считаем площадь треугольника и печатаем её
print(tri.area())  # 12.0

# пытаемся создать какую-то абстрактную фигуру, но она не создастся,
# потому что Shape -- это абстрактный класс
shape = Shape("Shape")  # TypeError: Can't instantiate abstract class Shape with abstract method area
