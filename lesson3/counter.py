"""
Напишите класс Counter, имеющий следующие методы:

- __init__(self): конструктор, создающий счетчик и устанавливающий его значение в 0;
- __call__(self): магический метод, который позволяет использовать объект класса Counter как функцию, возвращающую текущее значение счетчика;
- increment(self): метод, увеличивающий значение счетчика на 1.
"""


class Counter:

    def __init__(self) -> None:
        """Инициализируем счётчик"""
        self.counter = 0  # начальное значение равно 0

    def __call__(self, *args, **kwargs) -> int:  # значение счётчика -- это цифра
        """
        Метод позволяет использовать объект класса Counter как функцию,
        возвращающую текущее значение счетчика
        """
        # *args, **kwargs в данном случае можно не писать,
        # потому что функция counter() не принимает никаких аргументов
        return self.counter

    def increment(self) -> None:
        """Увеличиваем значение счётчика на 1"""
        self.counter += 1


if __name__ == '__main__':
    # создаём экземпляр класса
    counter = Counter()
    # Выводим текущее значение счётчика через метод __call__ (неявно).
    # О том, что работает именно __call__ говорят скобки после названия экземпляра класса.
    # То есть мы вызываем этот экземпляр как функцию и теоретически
    # можем передать туда какие-то аргументы, хотя в данном случае не передаём.
    print(counter())  # 0

    # увеличиваем значение счётчика на единицу
    counter.increment()
    # снова выводим значение счётчика через __call__
    print(counter())  # 1

    # ещё раз увеличиваем значение на 1
    counter.increment()
    # и ещё раз выводим значение счётчика, как вы уже догадались ))
    print(counter())  # 2
