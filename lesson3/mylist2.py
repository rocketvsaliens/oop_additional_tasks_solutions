"""
Напишите класс MyList2, который будет работать аналогично встроенному классу list(). Класс должен иметь следующие методы:

- __init__(self, data): конструктор, принимающий список элементов;
- __iter__(self): магический метод, который возвращает итератор;
- __next__(self): магический метод, который возвращает следующий элемент последовательности;
- __getitem__(self, index): магический метод, который позволяет обратиться к элементу списка по индексу.
"""


class MyList2:
    def __init__(self, data: list) -> None:
        """Конструктор, принимающий список элементов"""
        if type(data) == list:  # проверка на тип список
            self.data = data
        else:
            # если на вход пришёл не список, то выбрасываем исключение
            raise TypeError('Данные должны быть списком')
        self.step = 1

    def __iter__(self) -> object:
        """Магический метод, который возвращает итератор"""
        self.index = 0  # устанавливаем начальный индекс, равный 0
        return self  # возвращаем объект -- итератор

    def __next__(self):
        """
        Магический метод, который возвращает следующий элемент последовательности
        или выбрасывает исключение StopIteration, если элементы закончились
        """
        if self.index < len(self.data):  # проверяем, что текущий индекс меньше длины списка
            current_element = self.data[self.index]
            self.index += self.step  # увеличиваем индекс на величину шага
            return current_element  # возвращаем текущий элемент
        else:
            raise StopIteration  # вызываем исключение, если больше нет элементов

    def __getitem__(self, index: int):
        """
        Магический метод, который позволяет обратиться к элементу списка по индексу
        Если индекса нет в списке, будет исключение IndexError
        """
        if isinstance(index, int):  # проверяем, что на вход пришло целое число
            if index < len(self.data):  # проверяем, что индекс есть в списке
                return self.data[index]  # возвращаем элемент по индексу
            else:
                # вызываем исключение, если элемента нет в списке
                raise IndexError('Элемента с таким индексом нет в списке')
        # вызываем исключение, если на вход пришло не целое число
        raise TypeError('Индекс списка должен быть числом')


if __name__ == '__main__':
    # создаём экземпляр класса
    my_list = MyList2([1, 2, 3])
    # возвращаем элемент по индексу через __getitem__
    print(my_list[1])  # 2
    # вызываем итератор
    iter(my_list)
    # возвращаем первый элемент последовательности
    print(next(my_list))  # 1
    # возвращаем второй элемент последовательности
    print(next(my_list))  # 2
    # возвращаем третий элемент последовательности
    print(next(my_list))  # 3
    # больше элементов нет, будет исключение
    print(next(my_list))  # StopIteration

    # Код ниже можно раскомментировать, он выведет то же самое, только без StopIteration.
    # На примерах с next и StopIteration более наглядно видно работу итератора.
    # for i in my_list:
    #     print(i, end='')  # 1 2 3
