"""
Напишите класс Person, представляющий человека, имеющий следующие методы:
- __init__(self, name, age): конструктор, принимающий имя человека и его возраст;
- get_name(self): метод, который возвращает имя человека;
- get_age(self): метод, который возвращает возраст человека.

Напишите класс Employee2, наследующийся от класса Person, представляющий сотрудника, имеющий следующие методы:
- __init__(self, name, age, salary): конструктор, принимающий имя сотрудника, его возраст и зарплату;
- get_salary(self): метод, который возвращает зарплату сотрудника.

Напишите класс Manager2, наследующийся от класса Employee2, представляющий менеджера, имеющий следующие методы:
- __init__(self, name, age, salary, bonus): конструктор, принимающий имя менеджера, его возраст, зарплату и бонус;
- get_bonus(self): метод, который возвращает бонус менеджера.
"""


class Person:
    """Класс, представляющий человека"""

    def __init__(self, name: str, age: int) -> None:
        """Конструктор, принимающий имя человека и его возраст"""
        self._name = name
        self._age = age

    def get_name(self) -> str:
        """Метод, который возвращает имя человека"""
        return self._name

    def get_age(self) -> int:
        """Метод, который возвращает возраст человека"""
        return self._age


class Employee2(Person):
    """Класс, наследующийся от класса Person, представляющий сотрудника"""

    def __init__(self, name: str, age: int, salary: int or float) -> None:
        """Конструктор, принимающий имя сотрудника, его возраст и зарплату"""
        super().__init__(name, age)
        # С помощью  super().__init__(name, age)
        # вызывается инициализатор родительского класса Person.
        # Это позволяет установить значения name и age для объекта Employee2,
        # используя инициализаторы родительских классов.
        self._salary = salary

    def get_salary(self) -> int or float:
        """Метод, который возвращает зарплату сотрудника"""
        return self._salary


class Manager2(Employee2):
    """Класс, наследующийся от класса Employee2, представляющий менеджера"""

    def __init__(self, name: str, age: int, salary: int or float, bonus: int or float) -> None:
        """Конструктор, принимающий имя менеджера, его возраст, зарплату и бонус"""
        super().__init__(name, age, salary)
        # С помощью  super().__init__(name, age, salary)
        # вызывается инициализатор родительского класса Employee2,
        # который в свою очередь вызывает инициализатор родительского класса Person.
        # Это позволяет установить значения name, age и salary для объекта Manager2,
        # используя инициализаторы родительских классов.
        self._bonus = bonus

    def get_bonus(self) -> int or float:
        """Метод, который возвращает бонус менеджера"""
        return self._bonus


# Создаём человека
person = Person("John", 30)
# Выводим имя человека
print(person.get_name())  # John
# Выводим возраст человека
print(person.get_age())  # 30

# Создаём человека-сотрудника
employee = Employee2("Jane", 25, 5000)
# Выводим имя человека-сотрудника
print(employee.get_name())  # Jane
# Выводим возраст человека-сотрудника
print(employee.get_age())  # 25
# Выводим зарплату человека-сотрудника
print(employee.get_salary())  # 5000

# Создаём человека-сотрудника-менеджера
manager = Manager2("Bob", 40, 10000, 5000)
# Выводим имя человека-сотрудника-менеджера
print(manager.get_name())  # Bob
# Выводим возраст человека-сотрудника-менеджера
print(manager.get_age())  # 40
# Выводим зарплату человека-сотрудника-менеджера
print(manager.get_salary())  # 10000
# Выводим бонус человека-сотрудника-менеджера
print(manager.get_bonus())  # 5000
