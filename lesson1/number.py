"""
Создай класс `Number` c полем `value` (указывается при инициализации)
Создай экземпляр, например `x = Number(7)`
Добавь методы:
`.get()` возвращает текущее value
`.add(<значение>)` добавляет указанное число к value
`.subtract(<значение>)` вычитает указанное число из value
"""


class Number:

    def __init__(self, value: int):
        self.value = value

    def get(self):
        """Возвращает текущее значение поля value экземпляра класса"""
        return self.value

    # Так как в методах ниже нам надо изменить само значение self.value, то используем
    # инкремент (+=) для увеличения и декремент (-=) для уменьшения значения.
    # Затем возвращаем новую величину поля value для экземпляра класса.
    def add(self, new_value):
        """
        Увеличивает значение поля value на указанную величину new_value
        и возвращает увеличенное значение
        """
        self.value += new_value
        return self.value

    def subtract(self, new_value):
        """
        Уменьшает значение поля value на указанную величину new_value
        и возвращает уменьшенное значение
        """
        self.value -= new_value
        return self.value


# создаём экземпляр класса
n = Number(7)
# Выводим текущее значение поля value
print(n.get())  # 7
# Увеличиваем значение value на 3
n.add(3)
# Выводим текущее значение поля value
print(n.get())  # 10
# Уменьшаем значение поля value на 5
n.subtract(5)
# Выводим текущее значение поля value
print(n.get())  # 5
